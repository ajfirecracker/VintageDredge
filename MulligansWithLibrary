initial_hand_size = 7
initial_powders_in_library = 4
initial_library_size = 60
success_probabilities = {}
new_mull_rule = True
on_the_draw = True
keep_loa_on_7 = True

def num_targets(hand_size):
    if keep_loa_on_7 and hand_size >=7:
        return 5
    else:
        return 4

def choose(n, k):
    if 0 <= k <= n:
        ntok = 1
        ktok = 1
        for t in range(1, min(k, n - k) + 1):
            ntok *= n
            ktok *= t
            n -= 1
        return ntok // ktok
    else:
        return 0
def success_probability(hand_size, powders_in_deck, library_size):
  # if you've mulliganed to zero, you're done
  if hand_size <=0:
      if new_mull_rule and on_the_draw:
        return 1.0 - choose(library_size - num_targets(hand_size), 2)*1.0/choose(library_size, 2)
      elif on_the_draw:
        return 1.0 - choose(library_size - num_targets(hand_size), 1)*1.0/choose(library_size, 1)
      else:
          return 0.0
  # if you somehow have negative Serum Powders, you're done
  # this should never be true
  if powders_in_deck <= -1:
      raise
  # if you've managed to exile more than 28 cards you're done
  # this should never be true
  if library_size <= 31:
      raise
  # DP solution, memoize previous work
  if (hand_size, powders_in_deck, library_size) in success_probabilities:
    return success_probabilities[(hand_size, powders_in_deck, library_size)]

  probability_of_success = 0.0
  num_possible_hands_without_bazaar = (choose(library_size - num_targets(hand_size), hand_size) * 1.0)
  num_possible_hands = choose(library_size, hand_size)
  probability_draw_bazaar =  \
    1.0 -  num_possible_hands_without_bazaar / num_possible_hands
  probability_of_success += probability_draw_bazaar

  for powders_drawn in range(powders_in_deck + 1):
    probability_no_bazaar_and_k_powder= \
      (choose(powders_in_deck, powders_drawn) * 1.0) * \
      choose(library_size - powders_in_deck - num_targets(hand_size), hand_size - powders_drawn) / \
      choose(library_size, hand_size)
    probability_mulligan_success = \
      success_probability(hand_size - 1, powders_in_deck, library_size)                                                    
    if powders_drawn > 0:
      probability_powder_success = \
        success_probability(hand_size, powders_in_deck - powders_drawn, library_size - hand_size)
    else:
      probability_powder_success = 0.0
    ## Uncommenting the following lines will show for what combinations of hand 
    ## size, powders in deck and library size where a success is more likely by 
    ## mulliganing than using Serum Powder if a Serum Powder is drawn.
    ## Spoiler alert: It never is for a 60 card deck, but is neccessary for 
    ## completeness for very large library sizes that this program could be used to analyze.
    ##if powders_drawn > 0:
    ##  if probability_mulligan_success > probability_powder_success:
    ##    print "(hand_size, powders_in_deck, library_size)"
    ##    print (hand_size, powders_in_deck, library_size)
    ##    print "MULLIGAN"

    if hand_size < initial_hand_size and new_mull_rule and on_the_draw:
        probability_keep_success = 1.0 - choose(library_size - hand_size - num_targets(hand_size), 2)*1.0/choose(library_size - hand_size, 2)
    elif hand_size < initial_hand_size and on_the_draw:
        probability_keep_success = 1.0 - choose(library_size - hand_size - num_targets(hand_size), 1)*1.0/choose(library_size - hand_size, 1)
    else:
        probability_keep_success = 0.0
    ##if probability_keep_success > probability_powder_success and powders_drawn > 0:
    ##  print "(hand_size, powders_in_deck, library_size)"
    ##  print (hand_size, powders_in_deck, library_size)
    ##  print "probability_keep_success"
    ##  print probability_keep_success
    ##  print "probability_powder_success"
    ##  print probability_powder_success

    probability_of_success_if_you_draw_none_of_the_bazaar_and_k_serum_powder = \
      max([probability_mulligan_success, probability_powder_success,
          probability_keep_success])
    probability_of_success += \
      probability_no_bazaar_and_k_powder * probability_of_success_if_you_draw_none_of_the_bazaar_and_k_serum_powder

  success_probabilities[(hand_size, powders_in_deck, library_size)] = probability_of_success
  return probability_of_success

print(success_probability(initial_hand_size, initial_powders_in_library, initial_library_size))
